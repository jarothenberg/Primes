import matplotlib.pyplot as plt
import numpy as np


def pi(x):
    # pi(x)=R(x)-sum(from rho = 0 to inf, R(x^rho))
    print(x)


def R(x):  # working
    # R(x)=sum(n=1 to inf, (mu(n)/n)*li(x^(1/n)))
    infinity = 1000
    sum = 0
    for n in range(1, infinity):
        sum += (mu(n) / n) * li(pow(x, 1 / n))
    return sum


def mu(n):  # working
    # mu(n)=d(w(n),o(n))*(g(n))
    return int(d(w(n), o(n)) * g(n))


def d(i, j):  # working
    # return 0 if i!=j
    # return 1 if i=j
    return i == j


def o(n):  # working
    # return number of prime factors of n with multiplicity
    return len(factor(n, True))


def w(n):  # working
    # return number of prime factors of n without multiplicity
    return len(factor(n, False))


def g(n):  # working
    # g(n)=(-1)^o(n)
    return pow(-1, o(n))


def li(x):  # working
    # li(x)=integral from 0 to x dt/ln(t)
    f = -1 * pow(10, 99)
    x = np.log(x)
    if x == 1:
        d = -np.inf
        return d
    if abs(x - 10) >= 12:
        j = int(5.0 + (20.0 / abs(x)))
        f = x
        f = (1.0 / (1.0 / f - 1.0 / j)) + x
        j -= 1
        while j != 0:
            f = (1.0 / (1.0 / f - 1.0 / j)) + x
            j -= 1
        f = (pow(np.e, x) / f)
        return f
    else:
        if x == 0:
            return f
        else:
            j = int(10.0 + (2.0 * abs(x)))
            f = 1.0 / pow((j + 1.0), 2)
            f = ((f * j * x) + 1.0) / pow(j, 2)
            j -= 1
            while j != 0:
                f = ((f * j * x) + 1.0) / pow(j, 2)
                j -= 1
            f = (f * x)
            temp1 = f
            d = 0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495146314472498070824809605040144865428362241739976449235362535003337429373377376739427925952582470949160087352039481656708532331517766115286211995015079847937450857057400299213547861466940296043254215190587755352673313992540129674205137541395491116851028079842348775872050384310939973613725530608893312676001724795378367592713515772261027349291394079843010341777177808815495706610750101619166334015227893586796549725203621287922655595366962817638879272680132431010476505963703947394957638906572967929601009015125195950922243501409349871228247949747195646976318506676129063811051824197444867836380861749455169892792301877391072945781554316005002182844096053772434203285478367015177394398700302370339518328690001558193988042707411542227819716523011073565833967348717650491941812300040654693142999297779569303100503086303418569803231083691640025892970890985486825777364288253954925873629596133298574739302373438847070370284412920166417850248733379080562754998434590761643167103146710722370021810745044418664759134803669025532458625442225345181387912434573501361297782278288148945909863846006293169471887149587525492366493520473243641097268276160877595088095126208404544477992299157248292516251278427659657083214610298214617951957959095922704208989627971255363217948873764210660607065982561990102880756125199137511678217643619057058440783573501580056077457934213144988500786415171615194565706170432450750081687052307890937046143066848179164968425491504967243121837838753564894950868454102340601622508515583867234944187880440940770106883795111307872023426395226920971608856908382511378712836820491178925944784861991185293910293099059255266917274468920443869711147174571574573203935209122316085086827558890109451681181016874975470969366671210206304827165895049327314860874940207006742590918248759621373842311442653135029230317517225722162832488381124589574386239870375766285513033143929995401853134141586212788648076110030152119657800681177737635016818389733896639868957932991456388644310370608078174489957958324579418962026049841043922507860460362527726022919682995860988339013787171422691788381952984456079160519727973604759102510995779133515791772251502549293246325028747677948421584050759929040185576459901862692677643726605711768133655908815548107470000623363725288949554636971433012007913085552639595497823023144039149740494746825947320846185246058776694882879530104063491722921858008706770690427926743284446968514971825678095841654491851457533196406331199373821573450874988325560888873528019019155089688554682592454445277281730573010806061770113637731824629246600812771621018677446849595142817901451119489342288344825307531187018609761224623176749775564124619838564014841235871772495542248201615176579940806296834242890572594739269638633838743805471319676429268372490760875073785283702304686503490512034227217436689792848629729088926789777032624623912261888765300577862743606094443603928097708133836934235508583941126709218734414512187803276150509478055466300586845563152454605315113252818891079231491311032344302450933450003076558648742229717700331784539150566940159988492916091140029486902088485381697009551566347055445221764035862939828658131238701325358800625686626926997767737730683226900916085104515002261071802554659284938949277595897540761559933782648241979506418681437881718508854080367996314239540091964388750078900000627997942809886372992591977
            d += temp1
            f = np.log(abs(x))
            temp2 = f
            d += temp2
            return d


def z(s):  # not working for all s
    # z(s)=sum(n=1 to inf, 1/n^s)
    infinity = 5000000
    sum = 0
    for n in range(1, infinity):
        sum += 1 / pow(n, s)
    return sum


def factor(a, multiplicity):  # working
    count = 1
    count1 = -1
    while count <= a:
        count *= 2
        count1 += 1
    product = 1
    a1 = a
    aF = []
    count = 0
    preNum = -1
    for i in range(0, count1):
        num = 2
        while a1 % num != 0:
            num += 1
        a1 /= num
        if preNum != num or multiplicity:
            aF.append(num)
        product *= num
        count += 1
        if product == a:
            break
        preNum = num
    return aF


def primeCounterFloor(x):
    sum = 0
    for k in range(1, int(np.log2(x)) + 1):
        sum1 = 0
        for n in range(2, int(pow(x, 1 / k)) + 1):
            sum1 += int(pow(x, 1 / k) / n) * mu(n) * o(n)
        sum += mu(k) * sum1
    return -sum